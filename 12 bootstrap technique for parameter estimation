{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "eb8fc7f0-1dc6-43bd-bb4a-728ae7b797ff",
   "metadata": {},
   "source": [
    "# Week 8: Parameter Estimation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d7222966-886f-433d-a6f2-202c27869b82",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loading the libraries\n",
    "import numpy as np\n",
    "import sympy as sp\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "import scipy.stats as stats\n",
    "import scipy.optimize as opt\n",
    "#from scipy.integrate import quad"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edf40df9-2557-4d22-9a2e-e813d28f06cf",
   "metadata": {},
   "source": [
    "## Day 1: Bootstrap Method\n",
    "\n",
    "* The **bootstrap** methods are a class of techniques that can be used to construct an interval estimate of a parameter.\n",
    "* Bootstrap methods are **general** in a sense that they can be applied to *any* parameter\n",
    "* These methods are \"empirical\" and do not require knowledge of the sampling distribution of the statistic that corresponds to the parameter of interest. Instead, they rely on resampling and simulation\n",
    "\n",
    "\n",
    "## How does it work?\n",
    "The situation is as follows:\n",
    "* We have a sample of data of size `n`\n",
    "* The sample comes from a population which follows some distribution (which we do not know)\n",
    "* We wish to estimate some parameter of the population distribution by constructing an interval estimate for it\n",
    "\n",
    "To simplify things, we will talk about the population mean $\\mu$, but the same approach applies to any other parameter (e.g. median, standard devaition etc).\n",
    "To get what we need we do the following:\n",
    "* Calculate the mean of the original sample $\\bar{x}$\n",
    "* Generate many **bootstrapped samples** from the original sample, allowing for sampling **with replacement**. If you generate `m` bootstrapped samples (thousands), then for each of these calculate the mean. This will give you a sequence\n",
    "$$\\bar{x}_1^*, \\bar{x}_2^*, \\ldots, \\bar{x}_{m}^*$$\n",
    "of means of the bootstrapped samples.\n",
    "* Calculate a sequence of differences $\\delta_1^*, \\delta_2^*, \\ldots, \\delta_m^*$ where:\n",
    "$$\\delta_i^* = \\bar{x}_i^* - \\bar{x}$$\n",
    "for each $i = 1, 2, \\ldots, m$. This sequence captures the variability of the original distribution, so it is crucial to the process\n",
    "* Say we want a `90%` \"confidence\" interval. We calculate $\\overline{\\delta}$, and $\\underline{\\delta}$, the 5-th and 95-th percentile respectively\n",
    "* Finally, the interval estimate for the population mean $\\mu$ is given as:\n",
    "$$ \\left( \\bar{x} - \\underline{\\delta},\\, \\bar{x} - \\overline{\\delta} \\right) $$\n",
    "Note that this interval is **NOT** the same as the actual confidence interval for the population parameter!\n",
    "\n",
    "## Example 1\n",
    "Test the efficiency of the bootstrap method by using it to construct a 90% \"confidence\" interval for the mean of a normal distribution.\n",
    "* Use normal distribution $\\mathcal{N}(\\mu=10, \\sigma=2)$\n",
    "* Draw a random sample of size `n=20` from this distribution\n",
    "* Estimate $\\mu$ with an interval using bootstrapping"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3a5b0619",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 9.97417344,  9.11072734, 10.21489785,  9.79558029, 11.43820648,\n",
       "        6.60780282, 10.63565916, 13.82263336, 10.5953752 ,  8.83554034,\n",
       "       10.72085079, 12.33970658,  8.94292422,  9.42502185,  9.34560912,\n",
       "       12.3724684 , 11.01686295, 10.26944701, 11.69779718, 15.07851095])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Sample size:\n",
    "n = 20\n",
    "\n",
    "sample = stats.norm(10, 2).rvs(size=n)\n",
    "\n",
    "sample"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c4640baa",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x_bar = 10.61198976628771\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(deltas_5th, deltas_95th) = (-0.6674243296003844, 0.716057790158185)\n",
      "\n",
      "Interval of the estimation of the mean value (mu) of the population with 90% confidence : (9.8959, 11.2794).\n",
      "\n"
     ]
    }
   ],
   "source": [
    "x_bar = sample.mean()\n",
    "\n",
    "print(f\"x_bar = {x_bar}\\n\")\n",
    "\n",
    "# Number of simulations:\n",
    "m = 1000\n",
    "\n",
    "# Define and init variables:\n",
    "boot_sample_means = np.zeros(m)\n",
    "deltas = np.zeros(m)\n",
    "\n",
    "# Run simulations and save results:\n",
    "for i in range(m):\n",
    "    boot_sample = np.random.choice(sample, n)\n",
    "    \n",
    "    boot_sample_means[i] = boot_sample.mean()\n",
    "    \n",
    "    deltas[i] = boot_sample.mean() - x_bar\n",
    "    \n",
    "#     print(f\"{boot_sample}\\n\")\n",
    "\n",
    "# print(f\"boot_sample_means = {boot_sample_means}\\n\")\n",
    "# print(f\"deltas = {deltas}\\n\")\n",
    "\n",
    "# Plot the deltas:\n",
    "sns.histplot(deltas)\n",
    "plt.show()\n",
    "\n",
    "# Find the 5th and 95th percentile of the deltas:\n",
    "deltas_5th, deltas_95th = np.percentile(deltas, [5, 95])\n",
    "\n",
    "print(f\"(deltas_5th, deltas_95th) = {(deltas_5th, deltas_95th)}\\n\")\n",
    "\n",
    "# Construct the \"confidence\" interval - 90%:\n",
    "lower = x_bar - deltas_95th\n",
    "upper = x_bar - deltas_5th\n",
    "\n",
    "print(f\"Interval of the estimation of the mean value (mu) of the population with 90% confidence : {(round(lower, 4), round(upper, 4))}.\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a13cd038",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x_bar = 10.61198976628771\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(deltas_5th, deltas_95th) = (-0.6506611960996387, 0.6816676988724152)\n",
      "\n",
      "Interval of the estimation of the mean value (mu) of the population with 90% confidence : (9.9303, 11.2627).\n",
      "\n"
     ]
    }
   ],
   "source": [
    "x_bar = sample.mean()\n",
    "\n",
    "print(f\"x_bar = {x_bar}\\n\")\n",
    "\n",
    "# Number of simulations:\n",
    "m = 10000\n",
    "\n",
    "# Define and init variables:\n",
    "# Run simulations and save results:\n",
    "deltas = [np.random.choice(sample, n).mean() - x_bar for i in range(m)]\n",
    "\n",
    "# Plot the deltas:\n",
    "sns.histplot(deltas)\n",
    "plt.show()\n",
    "\n",
    "# Find the 5th and 95th percentile of the deltas:\n",
    "deltas_5th, deltas_95th = np.percentile(deltas, [5, 95])\n",
    "\n",
    "print(f\"(deltas_5th, deltas_95th) = {(deltas_5th, deltas_95th)}\\n\")\n",
    "\n",
    "# Construct the \"confidence\" interval - 90%:\n",
    "lower = x_bar - deltas_95th\n",
    "upper = x_bar - deltas_5th\n",
    "\n",
    "print(f\"Interval of the estimation of the mean value (mu) of the population with 90% confidence : {(round(lower, 4), round(upper, 4))}.\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "511714bc-0d43-426b-a2fc-ac3f35e736e5",
   "metadata": {},
   "source": [
    "## Example 2\n",
    "For the same distribution given in **Example 1**, using the same sample, estimate the standard deviation of the population."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "288560ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 9.97417344,  9.11072734, 10.21489785,  9.79558029, 11.43820648,\n",
       "        6.60780282, 10.63565916, 13.82263336, 10.5953752 ,  8.83554034,\n",
       "       10.72085079, 12.33970658,  8.94292422,  9.42502185,  9.34560912,\n",
       "       12.3724684 , 11.01686295, 10.26944701, 11.69779718, 15.07851095])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "f8290f2e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.8298958158146197"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample.std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "fc6f5ed5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(deltas_5th, deltas_95th) = (-0.6348215115677444, 0.4548921978952496)\n",
      "\n",
      "(lower, upper) = (1.37500361791937, 2.464717327382364)\n"
     ]
    }
   ],
   "source": [
    "m = 3000\n",
    "\n",
    "deltas = np.zeros(m)\n",
    "\n",
    "for i in range(m):\n",
    "    boot_sample = np.random.choice(sample, n)\n",
    "    \n",
    "    deltas[i] = boot_sample.std() - sample.std()\n",
    "    \n",
    "sns.histplot(deltas)\n",
    "plt.show()\n",
    "\n",
    "# Find the 5th and 95th percentile of the deltas:\n",
    "deltas_5th, deltas_95th = np.percentile(deltas, [5, 95])\n",
    "\n",
    "print(f\"(deltas_5th, deltas_95th) = {(deltas_5th, deltas_95th)}\\n\")\n",
    "\n",
    "# Construct the \"confidence\" interval - 90%:\n",
    "lower = sample.std() - deltas_95th\n",
    "upper = sample.std() - deltas_5th\n",
    "\n",
    "print(f\"(lower, upper) = {(lower, upper)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "65213fac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(deltas_5th, deltas_95th) = (-0.6343221155855396, 0.4704067083140433)\n",
      "\n",
      "(lower, upper) = (1.3594891075005764, 2.4642179314001593)\n"
     ]
    }
   ],
   "source": [
    "m = 3000\n",
    "\n",
    "deltas = [np.random.choice(sample, n).std() - sample.std() for i in range(m)]\n",
    "    \n",
    "sns.histplot(deltas)\n",
    "plt.show()\n",
    "\n",
    "# Find the 5th and 95th percentile of the deltas:\n",
    "deltas_5th, deltas_95th = np.percentile(deltas, [5, 95])\n",
    "\n",
    "print(f\"(deltas_5th, deltas_95th) = {(deltas_5th, deltas_95th)}\\n\")\n",
    "\n",
    "# Construct the \"confidence\" interval - 90%:\n",
    "lower = sample.std() - deltas_95th\n",
    "upper = sample.std() - deltas_5th\n",
    "\n",
    "print(f\"(lower, upper) = {(lower, upper)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f9ce02d-6e31-4cfc-899c-96f96f5101ce",
   "metadata": {},
   "source": [
    "## Example 3: Old Faithful and estimating the median\n",
    "Old Faithful is a geyser in Yellowstone National Park in Wyoming. Data given in `faithful.csv` contains information about a sample of consecutive eruptions of the geyser.\n",
    "\n",
    "Costruct a 95% bottstrap confidence interval for the median length of the eruptions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "e74ff7a8-f097-421c-b1aa-3739ed3ffd4f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>eruptions</th>\n",
       "      <th>waiting</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>216</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>108</td>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>200</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>137</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>272</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>267</th>\n",
       "      <td>247</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>268</th>\n",
       "      <td>129</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>269</th>\n",
       "      <td>265</td>\n",
       "      <td>90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>270</th>\n",
       "      <td>109</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>271</th>\n",
       "      <td>268</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>272 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     eruptions  waiting\n",
       "0          216       79\n",
       "1          108       54\n",
       "2          200       74\n",
       "3          137       62\n",
       "4          272       85\n",
       "..         ...      ...\n",
       "267        247       81\n",
       "268        129       46\n",
       "269        265       90\n",
       "270        109       46\n",
       "271        268       74\n",
       "\n",
       "[272 rows x 2 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "array([216, 108, 200, 137, 272, 173, 282, 216, 117, 261, 110, 235, 252,\n",
       "       105, 282, 130, 105, 288,  96, 255, 108, 105, 207, 184, 272, 216,\n",
       "       118, 245, 231, 266, 258, 268, 202, 242, 230, 121, 112, 290, 110,\n",
       "       287, 261, 113, 274, 105, 272, 199, 230, 126, 278, 120, 288, 283,\n",
       "       110, 290, 104, 293, 223, 100, 274, 259, 134, 270, 105, 288, 109,\n",
       "       264, 250, 282, 124, 282, 242, 118, 270, 240, 119, 304, 121, 274,\n",
       "       233, 216, 248, 260, 246, 158, 244, 296, 237, 271, 130, 240, 132,\n",
       "       260, 112, 289, 110, 258, 280, 225, 112, 294, 149, 262, 126, 270,\n",
       "       243, 112, 282, 107, 291, 221, 284, 138, 294, 265, 102, 278, 139,\n",
       "       276, 109, 265, 157, 244, 255, 118, 276, 226, 115, 270, 136, 279,\n",
       "       112, 250, 168, 260, 110, 263, 113, 296, 122, 224, 254, 134, 272,\n",
       "       289, 260, 119, 278, 121, 306, 108, 302, 240, 144, 276, 214, 240,\n",
       "       270, 245, 108, 238, 132, 249, 120, 230, 210, 275, 142, 300, 116,\n",
       "       277, 115, 125, 275, 200, 250, 260, 270, 145, 240, 250, 113, 275,\n",
       "       255, 226, 122, 266, 245, 110, 265, 131, 288, 110, 288, 246, 238,\n",
       "       254, 210, 262, 135, 280, 126, 261, 248, 112, 276, 107, 262, 231,\n",
       "       116, 270, 143, 282, 112, 230, 205, 254, 144, 288, 120, 249, 112,\n",
       "       256, 105, 269, 240, 247, 245, 256, 235, 273, 245, 145, 251, 133,\n",
       "       267, 113, 111, 257, 237, 140, 249, 141, 296, 174, 275, 230, 125,\n",
       "       262, 128, 261, 132, 267, 214, 270, 249, 229, 235, 267, 120, 257,\n",
       "       286, 272, 111, 255, 119, 135, 285, 247, 129, 265, 109, 268],\n",
       "      dtype=int64)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# reading the file\n",
    "df = pd.read_csv('faithful.csv')\n",
    "\n",
    "display(df)\n",
    "\n",
    "sample = np.array(df['eruptions'])\n",
    "\n",
    "sample"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "86291570",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "median(sample) = 240.0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(deltas_5th, deltas_95th) = (-10.0, 7.0)\n",
      "\n",
      "(lower, upper) = (233.0, 250.0)\n"
     ]
    }
   ],
   "source": [
    "print(f\"median(sample) = {np.median(sample)}\")\n",
    "\n",
    "m = 3000\n",
    "\n",
    "deltas = np.zeros(m)\n",
    "\n",
    "for i in range(m):\n",
    "    \n",
    "    boot_sample = np.random.choice(sample, sample.size)\n",
    "    \n",
    "    deltas[i] = np.median(boot_sample) - np.median(sample)\n",
    "\n",
    "sns.histplot(deltas)\n",
    "plt.show()\n",
    "\n",
    "# Find the 5th and 95th percentile of the deltas:\n",
    "deltas_5th, deltas_95th = np.percentile(deltas, [2.5, 97.5])\n",
    "\n",
    "print(f\"(deltas_5th, deltas_95th) = {(deltas_5th, deltas_95th)}\\n\")\n",
    "\n",
    "# Construct the \"confidence\" interval - 90%:\n",
    "lower = np.median(sample) - deltas_95th\n",
    "upper = np.median(sample) - deltas_5th\n",
    "\n",
    "print(f\"(lower, upper) = {(lower, upper)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "a688548a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "median(sample) = 240.0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(deltas_5th, deltas_95th) = (-10.0, 6.5)\n",
      "\n",
      "(lower, upper) = (233.5, 250.0)\n"
     ]
    }
   ],
   "source": [
    "print(f\"median(sample) = {np.median(sample)}\")\n",
    "\n",
    "m = 3000\n",
    "\n",
    "deltas = [np.median(np.random.choice(sample, sample.size)) - np.median(sample) for i in range(m)]\n",
    "\n",
    "sns.histplot(deltas)\n",
    "plt.show()\n",
    "\n",
    "# Find the 5th and 95th percentile of the deltas:\n",
    "deltas_5th, deltas_95th = np.percentile(deltas, [2.5, 97.5])\n",
    "\n",
    "print(f\"(deltas_5th, deltas_95th) = {(deltas_5th, deltas_95th)}\\n\")\n",
    "\n",
    "# Construct the \"confidence\" interval - 90%:\n",
    "lower = np.median(sample) - deltas_95th\n",
    "upper = np.median(sample) - deltas_5th\n",
    "\n",
    "print(f\"(lower, upper) = {(lower, upper)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed6498e0-d8e8-461c-a2f7-f992ad39fef0",
   "metadata": {},
   "source": [
    "## Hypothesis testing with bootstrapping\n",
    "It is possible to use the bootstrap method to test hypotheses. The approach is pretty much the same as with generating bootstrap \"confidence\" intervals, except that in this scenario we calculate a p-value for the test.\n",
    "\n",
    "We will illustrate the application of this approach in a case when we test about the population mean, but as before -- it can be set up to test hypotheses about any parameter.\n",
    "\n",
    "### Inference for the population mean\n",
    "Given a sample of size $n$, we wish to test the following hypotheses about the population mean $\\mu$:\n",
    "$$\n",
    "\\begin{align}\n",
    "H_0: \\mu &= \\mu_0\\\\\n",
    "H_a: \\mu &\\neq \\mu_0\n",
    "\\end{align}\n",
    "$$\n",
    "\n",
    "The process is identical up to the point when we calculate the sequence of differences $(\\delta_i^*)$ for $i=1, \\ldots, n$. In the last step, we just calculate the p-value as the probability:\n",
    "$$\n",
    "p = P\\left( \\delta^* >  \\left| \\bar{x}-\\mu_0 \\right| \\right)\n",
    "$$\n",
    "\n",
    "If we work with one-sided alternative, then:\n",
    "* If $H_a : \\mu < \\mu_0$, then the p-value is $p = P\\left( \\delta^* <  \\bar{x}-\\mu_0 \\right)$, and\n",
    "* If $H_a : \\mu > \\mu_0$, then the p-value is $p = P\\left( \\delta^* >  \\bar{x}-\\mu_0 \\right)$\n",
    "\n",
    "Similar rules would apply for other parameters\n",
    "\n",
    "### Example 4\n",
    "Verify the bootstrap method for hypothesis testing on the following *controled* case. Choose a random sample of size $n=20$ from a normal distribution $\\mathcal{N}(10, 2)$ and then test the hypotheses:\n",
    "$$\n",
    "\\begin{align}\n",
    "H_0: \\mu &= 11\\\\\n",
    "H_a: \\mu &\\neq 11\n",
    "\\end{align}\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "32e79d7b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([10.70678033,  8.84912645, 10.6969079 ,  6.15753008,  9.57878992,\n",
       "        9.96357849, 10.65204116, 13.17505014,  8.90324935, 15.66122466,\n",
       "        7.8620279 ,  9.91831583, 12.77144601, 10.06257134,  8.41637286,\n",
       "       11.39103596, 12.94515206, 12.17094366,  9.62480793,  8.76767973])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample = stats.norm(10, 2).rvs(size=20)\n",
    "\n",
    "sample"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "63d3b05f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# H0 : mu = 11\n",
    "# Ha : mu =/= 11\n",
    "\n",
    "m = 3000\n",
    "deltas = np.zeros(m)\n",
    "for i in range(m):\n",
    "    boot_sample = np.random.choice(sample, sample.size)\n",
    "    \n",
    "    deltas[i] = boot_sample.mean() - sample.mean()\n",
    "\n",
    "sns.histplot(deltas)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "34cdc440",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "|x_bar - mu0| = 0.4137315876355494\n",
      "\n",
      "P(delta* > |x_bar - mu0|) = P(delta* > 0.4137315876355494) = 0.36833333333333335\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.LineCollection at 0x1cda9459a50>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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AQAAViPsAAAAqxF2AACA1Qg7AADAaoQdAABgNcIOAACwGmEHAABYLaphZ8GCBbr33nuVlpamjIwM/exnP9NXX33VoMYYo+LiYmVnZ6tz584aNmyYjh492qAmEAhoxowZSk9PV2pqqsaNG6czZ86056oAAIAYFdWws2vXLj377LPau3evSkpKVFtbq8LCQn3//ffBmkWLFmnx4sVavny59u3bp8zMTI0aNUrV1dXBmpkzZ2rjxo1av369Pv/8c128eFFjx45VXV1dNFYLAADEkMRofvGPPvqowevVq1crIyND+/fv1wMPPCBjjJYuXap58+ZpwoQJkqS33npLPp9P69at07Rp0+T3+7Vq1Sq98847GjlypCRp7dq1ys3N1bZt2zR69Oh2Xy8AABA7YuqcHb/fL0nq1q2bJOnkyZMqKytTYWFhsMbj8Wjo0KHavXu3JGn//v26cuVKg5rs7Gzl5+cHa64XCARUVVXVYAIAAHaKmbBjjNGsWbN03333KT8/X5JUVlYmSfL5fA1qfT5fcFlZWZncbre6du16w5rrLViwQF6vNzjl5uaGe3UAAECMiJmwM336dB06dEjvvfdeo2Uul6vBa2NMo3nXa65m7ty58vv9wam0tLTtjQMAgJgWE2FnxowZ2rx5s3bs2KGePXsG52dmZkpSoz005eXlwb09mZmZchxHlZWVN6y5nsfjUZcuXRpMAADATlENO8YYTZ8+XRs2bND27dvVp0+fBsv79OmjzMxMlZSUBOc5jqNdu3apoKBAkjRgwAAlJSU1qDl79qyOHDkSrAEAAB1XVK/GevbZZ7Vu3Tpt2rRJaWlpwT04Xq9XnTt3lsvl0syZMzV//nz17dtXffv21fz585WSkqInn3wyWDt16lTNnj1b3bt3V7du3TRnzhz1798/eHUWAADouKIadlauXClJGjZsWIP5q1ev1pQpUyRJzz//vC5fvqxnnnlGlZWVGjRokD755BOlpaUF65csWaLExEQ99thjunz5skaMGKE1a9YoISGhvVYFAADEqKiGHWNMizUul0vFxcUqLi6+YU1ycrKWLVumZcuWhbE7AABgg5g4QRkAACBSCDsAAMBqhB0AAGA1wg4AALAaYQcAAFiNsAMAAKxG2AEAAFYj7AAAAKtF9aaCADqmQCAgx3FarKuurm6HbgDYjrADoF0FAgH17JWnivJz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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "abs_diff = abs(sample.mean() - 10)\n",
    "\n",
    "print(f\"|x_bar - mu0| = {abs_diff}\\n\")\n",
    "\n",
    "p_value = deltas[abs(deltas) > abs_diff].size / deltas.size\n",
    "\n",
    "print(f\"P(delta* > |x_bar - mu0|) = P(delta* > {abs_diff}) = {p_value}\\n\")\n",
    "\n",
    "sns.histplot(deltas)\n",
    "\n",
    "plt.vlines(abs_diff, 0, 40, color='red')\n",
    "plt.vlines(-abs_diff, 0, 40, color='red')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0fa3efe6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.23967156, -0.98023684,  0.02549369, ..., -0.43810842,\n",
       "        0.07974515,  0.04564374])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "deltas"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc0232f4-647f-4dfd-a320-ccbec85ad0e7",
   "metadata": {},
   "source": [
    "### Example 5\n",
    "For the eruption times for the Old Faithful data, test the following hypotheses about the population IQR:\n",
    "$$\n",
    "\\begin{align}\n",
    "H_0: \\mathrm{IQR} &= 145\\\\\n",
    "H_a: \\mathrm{IQR} &< 145\n",
    "\\end{align}\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4df0b908",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loading the libraries\n",
    "import numpy as np\n",
    "import sympy as sp\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "import scipy.stats as stats\n",
    "import scipy.optimize as opt\n",
    "#from scipy.integrate import quad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "88e75988",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>eruptions</th>\n",
       "      <th>waiting</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>216</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>108</td>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>200</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>137</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>272</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>267</th>\n",
       "      <td>247</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>268</th>\n",
       "      <td>129</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>269</th>\n",
       "      <td>265</td>\n",
       "      <td>90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>270</th>\n",
       "      <td>109</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>271</th>\n",
       "      <td>268</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>272 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     eruptions  waiting\n",
       "0          216       79\n",
       "1          108       54\n",
       "2          200       74\n",
       "3          137       62\n",
       "4          272       85\n",
       "..         ...      ...\n",
       "267        247       81\n",
       "268        129       46\n",
       "269        265       90\n",
       "270        109       46\n",
       "271        268       74\n",
       "\n",
       "[272 rows x 2 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "array([216, 108, 200, 137, 272, 173, 282, 216, 117, 261, 110, 235, 252,\n",
       "       105, 282, 130, 105, 288,  96, 255, 108, 105, 207, 184, 272, 216,\n",
       "       118, 245, 231, 266, 258, 268, 202, 242, 230, 121, 112, 290, 110,\n",
       "       287, 261, 113, 274, 105, 272, 199, 230, 126, 278, 120, 288, 283,\n",
       "       110, 290, 104, 293, 223, 100, 274, 259, 134, 270, 105, 288, 109,\n",
       "       264, 250, 282, 124, 282, 242, 118, 270, 240, 119, 304, 121, 274,\n",
       "       233, 216, 248, 260, 246, 158, 244, 296, 237, 271, 130, 240, 132,\n",
       "       260, 112, 289, 110, 258, 280, 225, 112, 294, 149, 262, 126, 270,\n",
       "       243, 112, 282, 107, 291, 221, 284, 138, 294, 265, 102, 278, 139,\n",
       "       276, 109, 265, 157, 244, 255, 118, 276, 226, 115, 270, 136, 279,\n",
       "       112, 250, 168, 260, 110, 263, 113, 296, 122, 224, 254, 134, 272,\n",
       "       289, 260, 119, 278, 121, 306, 108, 302, 240, 144, 276, 214, 240,\n",
       "       270, 245, 108, 238, 132, 249, 120, 230, 210, 275, 142, 300, 116,\n",
       "       277, 115, 125, 275, 200, 250, 260, 270, 145, 240, 250, 113, 275,\n",
       "       255, 226, 122, 266, 245, 110, 265, 131, 288, 110, 288, 246, 238,\n",
       "       254, 210, 262, 135, 280, 126, 261, 248, 112, 276, 107, 262, 231,\n",
       "       116, 270, 143, 282, 112, 230, 205, 254, 144, 288, 120, 249, 112,\n",
       "       256, 105, 269, 240, 247, 245, 256, 235, 273, 245, 145, 251, 133,\n",
       "       267, 113, 111, 257, 237, 140, 249, 141, 296, 174, 275, 230, 125,\n",
       "       262, 128, 261, 132, 267, 214, 270, 249, 229, 235, 267, 120, 257,\n",
       "       286, 272, 111, 255, 119, 135, 285, 247, 129, 265, 109, 268],\n",
       "      dtype=int64)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('faithful.csv')\n",
    "\n",
    "display(df)\n",
    "\n",
    "sample = np.array(df['eruptions'])\n",
    "\n",
    "sample"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "381ee90c",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: ylabel='Count'>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sample_iqr = np.percentile(sample, 75) - np.percentile(sample, 25)\n",
    "\n",
    "m = 3000\n",
    "deltas = np.zeros(m)\n",
    "for i in range(m):\n",
    "    \n",
    "    boot_sample = np.random.choice(sample, sample.size)\n",
    "    \n",
    "    boot_iqr = np.percentile(boot_sample, 75) - np.percentile(boot_sample, 25)\n",
    "    \n",
    "    deltas[i] = boot_iqr - sample_iqr\n",
    "\n",
    "sns.histplot(deltas)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "40b71544",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p_value := P(d* > sample_iqr - iqr_0) = 0.035\n",
      "\n",
      "Reject H0, accept Ha\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# H0 : IQR = 145\n",
    "# Ha : IQR < 145\n",
    "iqr_0 = 145\n",
    "\n",
    "# P(d* < sample_iqr - iqr_0)\n",
    "diff = sample_iqr - iqr_0\n",
    "\n",
    "p_value = deltas[deltas < diff].size / deltas.size\n",
    "\n",
    "print(f\"p_value := P(d* > sample_iqr - iqr_0) = {p_value}\\n\")\n",
    "\n",
    "if p_value < 0.05:\n",
    "    print(f\"Reject H0, accept Ha\")\n",
    "else:\n",
    "    print(f\"Accept H0\")\n",
    "\n",
    "sns.histplot(deltas)\n",
    "plt.vlines(diff, 0, 50, color='red')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4fd61e09",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "137.5"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_iqr"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2b59a64",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "# Continue from here (Day 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4e6c2c2-347e-4eaa-9b6a-3b447088dc8e",
   "metadata": {},
   "source": [
    "## Random sampling from a distribution\n",
    "\n",
    "In applications frequently there is need to draw/generate a random sample which follows a certain distribution. Now we will describe one very simple method that can generate random samples from just about any distribution. This method depends on an already implemeted random number generator for the uniform distribution.\n",
    "\n",
    "Say you have a probability densiti function $f(x)$ over the interval $[a, b]$. Let $M$ be a number such that\n",
    "\n",
    "$$M > \\max_{x \\in [a, b]}{f(x)}$$\n",
    "\n",
    "Next we generate random pairs of numbers $(x_k, y_k)$ such that $a \\leqslant x_k \\leqslant b$ and $0 \\leqslant y_k \\leqslant M$ ($y$ must be positive because the density function is always positive). These numbers are generated uniformly in the intervals.\n",
    "\n",
    "Now, we can select the sample in the following way: if $y_k < f(x_k)$, then put $x_k$ in the sample; otherwise, discard $x_k$ and move to the next pair. At the end of the process, the sample that we selected will follow the distribution given by the density $f(x)$.\n",
    "\n",
    "### Example 5\n",
    "Generate a random sample of 150 numbers in the interval $[0, 10]$ that follow a $\\chi^2$-disribution with 3 degrees of freedom."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3c19087a-bd8f-4c91-8d98-7390d06db4c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Let's first sketch the density to get an idea what to expect\n",
    "X = stats.chi2(df=3)\n",
    "xs = np.linspace(0, 10, 1000)\n",
    "plt.figure()\n",
    "plt.plot(xs, X.pdf(xs))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e636b02-67e3-45b4-a329-ad9c94d3639b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate the points\n",
    "n_pts = 150\n",
    "a = 0\n",
    "b = 10\n",
    "M = 0.25\n",
    "\n",
    "np.random.seed(12)\n",
    "x = []\n",
    "y = []\n",
    "num_in_sample = 0\n",
    "\n",
    "while num_in_sample < 150:\n",
    "    # Generate random pair\n",
    "    x_rand = np.random.random()*(b-a) + a\n",
    "    y_rand = np.random.random()*M\n",
    "    \n",
    "    if y_rand < X.pdf(x_rand):\n",
    "        num_in_sample += 1\n",
    "    x.append(x_rand)\n",
    "    y.append(y_rand)\n",
    "\n",
    "x = np.array(x)\n",
    "y = np.array(y)\n",
    "        \n",
    "plt.figure(figsize=(10,4))\n",
    "plt.scatter(x[y<X.pdf(x)], y[y<X.pdf(x)], c = 'g', s=10, label='in the sample')\n",
    "plt.scatter(x[y>=X.pdf(x)], y[y>=X.pdf(x)], c = 'r', s=10, label='out of the sample')\n",
    "plt.plot(xs, X.pdf(xs), label='the density')\n",
    "plt.hist(x[y<X.pdf(x)], color='k', alpha=0.2, density=True, label='the sample')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da511096-546d-4469-bb59-61b00a2c2a8f",
   "metadata": {},
   "source": [
    "### Example 6\n",
    "Generate a random sample of 100 numbers in the interval $[-5, 5]$ that follow a $t$-distribution with one degree of freedom."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f71c9874-5090-4cb2-bb6d-929d589bf201",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Get the distribution\n",
    "T = stats.t(df=1)\n",
    "\n",
    "# Generate the points\n",
    "n_pts = 150\n",
    "a = -5.0\n",
    "b = 5.0\n",
    "M = 0.35\n",
    "\n",
    "np.random.seed(124)\n",
    "x = []\n",
    "y = []\n",
    "num_in_sample = 0\n",
    "\n",
    "while num_in_sample < 100:\n",
    "    # Generate random pair\n",
    "    x_rand = np.random.random()*(b-a) + a\n",
    "    y_rand = np.random.random()*M\n",
    "    \n",
    "    if y_rand < T.pdf(x_rand):\n",
    "        num_in_sample += 1\n",
    "    x.append(x_rand)\n",
    "    y.append(y_rand)\n",
    "\n",
    "x = np.array(x)\n",
    "y = np.array(y)\n",
    "\n",
    "xs = np.linspace(-5, 5, 1000)\n",
    "plt.figure(figsize=(10,4))\n",
    "plt.scatter(x[y<T.pdf(x)], y[y<T.pdf(x)], c = 'g', s=10, label='in the sample')\n",
    "plt.scatter(x[y>=T.pdf(x)], y[y>=T.pdf(x)], c = 'r', s=10, label='out of the sample')\n",
    "plt.plot(xs, T.pdf(xs), label='the density')\n",
    "plt.hist(x[y<T.pdf(x)], color='k', alpha=0.2, density=True, label='the sample')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0a03d36c-f4c6-4b2b-acee-28cbc2d1535b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
