{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "sized-clause",
   "metadata": {
    "id": "sized-clause"
   },
   "source": [
    "# Week 5: Probability Distributions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "confused-journalism",
   "metadata": {
    "id": "confused-journalism"
   },
   "outputs": [],
   "source": [
    "# Loading the libraries\n",
    "import numpy as np\n",
    "import sympy as sp\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import scipy.stats as stats"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "floral-ticket",
   "metadata": {
    "id": "floral-ticket"
   },
   "source": [
    "## Days 2 and 3: Some Special Probability Distributions\n",
    "\n",
    "* Previously we have introduced the concept of a **random variable**, and the concept of **probability distribution** (via the *probability mass function* /pmf/ and *probability densiti function* /pdf/)\n",
    "* Now we talk about some probability distributions that frequently appear in the study of statistics and machine learning \n",
    "\n",
    "### Constucting Random Variables from scratch using `scipy.stats`\n",
    "* First order of business will be to learn how to construct a random variable from scratch using only values and probabilities\n",
    "* To illustrate the process, we will use two examples from before. The data is provided below"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "agreed-boundary",
   "metadata": {
    "id": "agreed-boundary"
   },
   "source": [
    "### Example 1: Discrete Variables\n",
    "Recall the example about supplying refurbished computers to a client. The random variable $L$ - total loss - is given in the following table.\n",
    "\n",
    "| $k$ | \\$0 | \\$100 | \\$1000|\n",
    "|:---:|:---:|:-----:|:-----:|\n",
    "|$P(L=k)$|0.528 | 0.416 | 0.056|\n",
    "\n",
    "* Construct the variable `comp_loss` as a `scipy.stats` object\n",
    "* Visualize its distribution on a bar graph\n",
    "* Calculate: $E(L)$, $Var(L)$, $\\sigma_L$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "random-snapshot",
   "metadata": {
    "id": "random-snapshot"
   },
   "outputs": [],
   "source": [
    "# Use scipy.stats.rv_discrete()\n",
    "vals = [0, 100, 1000]\n",
    "probs = [0.528, 0.416, 0.056]\n",
    "\n",
    "comp_loss = stats.rv_discrete(values=(vals,probs))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ifncftweC3WH",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 265
    },
    "id": "ifncftweC3WH",
    "outputId": "827af8c7-2269-494c-c308-a3771bc400da"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.bar(['$0', '$100', '$1000'], comp_loss.pmf(vals))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a02be360",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.528, 0.416, 0.056])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comp_loss.pmf(vals)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "GVP3T_aT1dew",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "GVP3T_aT1dew",
    "outputId": "9bcdf9eb-5669-497d-8b6b-ba4157a0b76d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "E(L) =  97.6\n",
      "Var(L) =  50634.240000000005\n",
      "sigma_L =  225.02053239649044\n"
     ]
    }
   ],
   "source": [
    "print('E(L) = ', comp_loss.mean())\n",
    "print('Var(L) = ', comp_loss.var())\n",
    "print('sigma_L = ', comp_loss.std())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "appropriate-bangkok",
   "metadata": {
    "id": "appropriate-bangkok"
   },
   "source": [
    "### Example 2: Continuous Variables\n",
    "Recall the continuous random variable $X$ given in **Example 4** from the previous lecture. $X$ is a random variable such that $X \\in [0, 1]$, and the pdf is given by\n",
    "\\begin{equation}f(x) = \\frac{15}{2} x^2 (1-x^2)\\end{equation}\n",
    "* Construct a `scipy.stats.rv_continuous` object named `x_rv` for a random variable $X$\n",
    "* Visualize $X$'s pdf\n",
    "* Find the probability $P(0.5 \\leqslant X \\leqslant 0.8)$\n",
    "* Calculate $E(X)$ and $\\sigma_X$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "enclosed-banks",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 265
    },
    "id": "enclosed-banks",
    "outputId": "925280ff-a3fc-4082-f467-30f7bdea14a8"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# use scipy.stats.rv_continuous()\n",
    "# first build a generator class with custom _pdf()\n",
    "class x_rv_generator(stats.rv_continuous):\n",
    "    def _pdf(self,x):\n",
    "        return 7.5 * x**2 * (1-x**2)\n",
    "\n",
    "x_rv = x_rv_generator(a=0, b=1)\n",
    "\n",
    "xs = np.linspace(-0.5, 1.5, 1000)\n",
    "plt.figure()\n",
    "plt.plot(xs, x_rv.pdf(xs))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ZapWbgIvDoKW",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "ZapWbgIvDoKW",
    "outputId": "1906939c-b104-4d92-b263-3f14d33f23b9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P(0.5 <= X <= 0.8) =  0.5228550000000002\n",
      "E(X) =  0.6250000000002507\n",
      "sigma_X =  0.19479843061696428\n"
     ]
    }
   ],
   "source": [
    "print('P(0.5 <= X <= 0.8) = ', x_rv.cdf(0.8) - x_rv.cdf(0.5))\n",
    "print('E(X) = ', x_rv.mean())\n",
    "print('sigma_X = ', x_rv.std())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b52641d1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.265625"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_rv.cdf(0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "occupied-context",
   "metadata": {
    "id": "occupied-context"
   },
   "source": [
    "### Practice Example 3: Continuous Variables\n",
    "$Y$ is a random variable such that $Y \\in [0, \\pi]$, and the pdf is given by\n",
    "\\begin{equation}f(y) = \\frac{2\\cdot \\sin^2 x}{\\pi}\\end{equation}\n",
    "* Construct a `scipy.stats.rv_continuous` object named `y_rv` for a random variable $Y$\n",
    "* Visualize $Y$'s pdf\n",
    "* Find the probability $P(0.5 \\leqslant Y \\leqslant 0.8)$ and $P\\left(\\frac{\\pi}{3} \\leqslant Y \\leqslant \\frac{3\\pi}{4}\\right)$\n",
    "* Calculate $E(Y)$ and $\\sigma_Y$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "czech-final",
   "metadata": {
    "id": "czech-final"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P(0.5 <= X <= 0.8) = 3228480.09838302\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Ivan\\anaconda3\\lib\\site-packages\\scipy\\stats\\_distn_infrastructure.py:2060: IntegrationWarning: The algorithm does not converge.  Roundoff error is detected\n",
      "  in the extrapolation table.  It is assumed that the requested tolerance\n",
      "  cannot be achieved, and that the returned result (if full_output = 1) is \n",
      "  the best which can be obtained.\n",
      "  return integrate.quad(self._pdf, _a, x, args=args)[0]\n",
      "C:\\Users\\Ivan\\anaconda3\\lib\\site-packages\\scipy\\stats\\_distn_infrastructure.py:2060: IntegrationWarning: The integral is probably divergent, or slowly convergent.\n",
      "  return integrate.quad(self._pdf, _a, x, args=args)[0]\n"
     ]
    }
   ],
   "source": [
    "# Loading the libraries\n",
    "import numpy as np\n",
    "import sympy as sp\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import scipy.stats as stats\n",
    "\n",
    "# use scipy.stats.rv_continuous() and np.pi\n",
    "class f(stats.rv_continuous):\n",
    "    def _pdf(self, x):\n",
    "        return (2 * (np.sin(x)) ** 2) / np.pi\n",
    "\n",
    "y_rv = f(name='pdf')\n",
    "\n",
    "ys = np.linspace(0, np.pi, 1000)\n",
    "plt.figure()\n",
    "plt.plot(ys, y_rv.pdf(ys))\n",
    "plt.show()\n",
    "\n",
    "# P(0.5 <= X <= 0.8):\n",
    "print(f\"P(0.5 <= X <= 0.8) = {y_rv.cdf(np.pi/3) - y_rv.cdf(3 * np.pi / 4)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "6b3a4f64",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5036.071837167222"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_rv.cdf(0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f6950476",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle 0.0703301526474876$"
      ],
      "text/plain": [
       "0.0703301526474876"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = sp.Symbol('x')\n",
    "\n",
    "f = 2 * (sp.sin(x)) ** 2 / sp.pi\n",
    "\n",
    "P = lambda a, b: sp.integrate(f, (x, a, b)).evalf()\n",
    "\n",
    "P(0.5, 0.8)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c1f8f75",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "# Continuation (Week 5 Workshop)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "successful-weather",
   "metadata": {
    "id": "successful-weather"
   },
   "source": [
    "### Binomial Distribution\n",
    "Recall the example with the couple who planned on having three children. Problems of this and similar nature appear quite frequently. The undelying commonalities for this class of problems are:\n",
    "* There is a fixed, predetermined number of independent trials/observations, usually labeled by $n$\n",
    "* All trials have only two outcomes: either *success* or *failure*\n",
    "* The probability of observing a success in each of the trials is fixed in all trials, and is usually labeled by $p$\n",
    "\n",
    "These three properties describe what is known as **Binomial Setting** which can universally be described using a single probability distribution function called **Binomial Distribution**. The binomial distribution has two *parameters*: the number of trials $n$, and the probability of success in each trial, $p$. If a random variable $X$ **counts the number of successes in the series of trials**, then it follows a binomial distribution with parameters $n$ and $p$, the we write:\n",
    "\\begin{equation} X \\sim \\mathcal{B}(n, p) \\end{equation}\n",
    "For such a discrete random variable $X \\in \\{0, 1, \\ldots, n  \\}$ and the pmf is given by:\n",
    "\\begin{equation} P(X = k) = {n \\choose k}p^k (1-p)^{n-k} \\end{equation}\n",
    "where ${n \\choose k} = \\frac{n!}{k! ~ (n-k)!}$ is called **binomial coefficient** (read: \"$n$ choose $k$\") and $!$ after a number denotes the factoral of the number, e.g. $5! = 5 \\cdot 4 \\cdot 3 \\cdot 2 \\cdot 1$. The binomial coefficient tells you in how many ways you can choose a group of size $k$ if your pool of choices is of size $n$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "korean-vertical",
   "metadata": {
    "id": "korean-vertical"
   },
   "source": [
    "### Example 4: Binomial Distribution\n",
    "Each offspring hatched from a particular type of reptile has probability 0.2 of surviving for at least one week. If 6 offspring of these reptiles are hatched, find the probability that:\n",
    "* Exactly 2 of the 6 will survive for at least one week\n",
    "* At most 2 of the 6 will survive for at least one week\n",
    "* At least 3 of the 6 will survive for at least one week"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "changed-parish",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "changed-parish",
    "outputId": "634c30f1-e85a-4259-f22b-0dfee5420d22"
   },
   "outputs": [],
   "source": [
    "# Use scipy.stats.binom()\n",
    "\n",
    "\n",
    "# Exactly 2 of the 6 will survive for at least one \n",
    "\n",
    "\n",
    "# At most 2 of the 6 will survive for at least one week\n",
    "\n",
    "\n",
    "# At least 3 of the 6 will survive for at least one week\n",
    "\n",
    "\n",
    "# Alternatively\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "10u6NAqTPwf7",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 265
    },
    "id": "10u6NAqTPwf7",
    "outputId": "2466a455-fd73-4040-d022-a2dbfa4cab2b"
   },
   "outputs": [],
   "source": [
    "# Plot the Binomial Distribution for the example:\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "tough-arctic",
   "metadata": {
    "id": "tough-arctic"
   },
   "source": [
    "### Practice Example 5: Binomial Distribution\n",
    "The Census Bureau's Current Population Survey shows 28% of individuals, ages 25 and older, have completed four years of college (this is 2006 data). For a random sample of 15 individuals, ages 25 and older:\n",
    "* What is the probability 4 will have completed four years of college?\n",
    "* What is the probability 3 or more will have completed four years of college?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aerial-survivor",
   "metadata": {
    "id": "aerial-survivor"
   },
   "outputs": [],
   "source": [
    "# Print intro\n",
    "print('X = # of people in the sample who have completed college')\n",
    "print('X ~ B(15, 0.28)')\n",
    "\n",
    "# What is the probability 4 will have completed four years of college?\n",
    "print('P(X = 4) = ', )\n",
    "\n",
    "# What is the probability 3 or more will have completed four years of college?\n",
    "print('P(X >= 3) = ', )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "contrary-disaster",
   "metadata": {
    "id": "contrary-disaster"
   },
   "source": [
    "### Normal Distribution\n",
    "The **Normal Distribution** goes by many names, and most people have heard about it. It is also known as **Gaussian Distribution** or **Bell-Curve**. The normal distribution has two parameters: the *location* parameter which is defined by the **mean** $\\mu$ of the distribution (and is the most likely outcome), and the *scale* parameter which is defined by the **variance** $\\sigma^2$ or **standard deviation** $\\sigma$ of the distribution (which determines the horizontal stretch of the distribution). If a random variable $X$ follows a normal distribution with mean $\\mu$ and standard deviation $\\sigma$, we write:\n",
    "\\begin{equation} X \\sim \\mathcal{N}(\\mu, \\sigma) \\end{equation}\n",
    "For any such random variable, $X \\in (-\\infty, \\infty)$ and the pdf is given by:\n",
    "\\begin{equation} f(x \\mid \\mu, \\sigma) = \\displaystyle \\frac{1}{\\sqrt{2\\pi}\\cdot \\sigma}~\\exp\\left( {-\\frac{1}{2} ~ \\left( \\frac{x - \\mu}{\\sigma} \\right)^2} \\right) \\end{equation}\n",
    "\n",
    "Every Normal distribution has a unique definiing property known as **68-95-99.7 Rule** or **Empirical Rule** which relates the mean, the standard deviation, and the normal probabilities:\n",
    "\\begin{equation}\n",
    "\\begin{array}{rcl}\n",
    "P \\big(\\mu - \\sigma \\leqslant X \\leqslant \\mu + \\sigma \\big) &\\approx& 0.68\\\\\n",
    "P \\big(\\mu - 2\\sigma \\leqslant X \\leqslant \\mu + 2\\sigma \\big) &\\approx& 0.95\\\\\n",
    "P \\big(\\mu - 3\\sigma \\leqslant X \\leqslant \\mu + 3\\sigma \\big) &\\approx& 0.997\n",
    "\\end{array}\n",
    "\\end{equation}\n",
    "In other words: only the outcomes which are **within 3 standard deviations of the mean** are relevant, all other outcomes occur so rarely that they can, most frequently, be disregarded."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fleet-synthesis",
   "metadata": {
    "id": "fleet-synthesis"
   },
   "source": [
    "### Example 6: Normal Distribution\n",
    "The weights of babies born at Prince Louis Maternity Hospital last year averaged $\\mu = 3.0$ kg with a standard deviation of $\\sigma = 200$ grams.\n",
    "* Visualize the distribution in the range $[\\mu - 4\\sigma, \\mu + 4\\sigma]$\n",
    "* What is the probability that a randomly selected baby born at the hospital weighs less than 3.2 kg?\n",
    "* If there were 545 babies born at this hospital last year, estimate the number of babies that weighed between 2.8 kg and 3.4 kg\n",
    "* Find the weight $w$ such that 40% of babies weigh less than $w$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "YcT70XPlWUww",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 265
    },
    "id": "YcT70XPlWUww",
    "outputId": "82d62a71-5e26-4208-ac17-aa84e4452947"
   },
   "outputs": [],
   "source": [
    "# use scipy.stats.norm()\n",
    "\n",
    "\n",
    "# Visualize the distribution\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aging-capture",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 408
    },
    "id": "aging-capture",
    "outputId": "07ec05a0-dcdb-4f40-8fff-7e7ce72bff77"
   },
   "outputs": [],
   "source": [
    "# use scipy.stats.norm()\n",
    "# Define mu and sigma\n",
    "\n",
    "\n",
    "# Visualize the distribution\n",
    "\n",
    "\n",
    "\n",
    "# print intro\n",
    "print(f'X ~ N({mu}, {sigma})')\n",
    "\n",
    "# What is the probability that a randomly selected baby born at the hospital weighs less than 3.2 kg?\n",
    "print('\\nP(X <= 3.2) = ', )\n",
    "\n",
    "\n",
    "# If there were 545 babies born at this hospital last year, estimate the\n",
    "# number of babies that weighed between 2.8 kg and 3.4 kg\n",
    "print('\\nP(2.8 <= X <= 3.4) = ', )\n",
    "print('# babies that weigh between 2.8 and 3.4 kg is ', )\n",
    "\n",
    "\n",
    "#Find the weight w such that 40% of babies weigh less than w\n",
    "print('\\nP(X < w) = 0.4 for w = ', ) #norm inv distribution"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "finished-circumstances",
   "metadata": {
    "id": "finished-circumstances"
   },
   "source": [
    "### Example 7: Normal Distribution\n",
    "The heights of a group of students are normally distributed with a mean of 160 cm and a standard deviation of 20 cm.\n",
    "* A student is chosen at random. Find the probability that the student’s height is greater than 180 cm.\n",
    "* In this group of students, 11.9% have heights less than $d$ cm. Find the value of $d$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "plastic-liberty",
   "metadata": {
    "id": "plastic-liberty"
   },
   "outputs": [],
   "source": [
    "# Define the parameters\n",
    "\n",
    "\n",
    "# Define the distribution\n",
    "\n",
    "# print intro\n",
    "print(f'X ~ N({mu}, {sigma})')\n",
    "\n",
    "\n",
    "# A student is chosen at random. Find the probability that the student’s height is greater than 180 cm.\n",
    "print('P(X > 180) = ', )\n",
    "\n",
    "# In this group of students, 11.9% have heights less than d cm. Find the value of d.\n",
    "print('P(X < d) = 0.119 for d = ', )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "UHRThGPJanBM",
   "metadata": {
    "id": "UHRThGPJanBM"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [
    "contrary-disaster"
   ],
   "name": "Week 5, Day 2 (Some Special Distributions) - classwork.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
