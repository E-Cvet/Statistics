{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "saving-quest",
   "metadata": {},
   "source": [
    "# Week 6: Inferential Statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "graduate-trading",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loading the libraries\n",
    "import numpy as np\n",
    "import sympy as sy\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import scipy.stats as stats"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "extensive-screen",
   "metadata": {},
   "source": [
    "## Day 1: The Central Limit Theorem & Confidence Intervals\n",
    "This week we will discuss how conclusions can be drawn (inferences be made) about data using random variables and their probability distributions.\n",
    "\n",
    "The setting is as follows: let $X \\sim \\mathcal{N}(\\mu, \\sigma)$ be a random variable. Assime we choose a random sample of size $n$ based on the distribution of $X$. Next we calculate the sample mean $\\bar{x}_1$ where the 1 denotes it is the \"first\" sample we draw. Now, repeat the process many times, generating a **sequence of averages of samples with size $n$**:\n",
    "\\begin{equation} \\bar{x}_1, \\bar{x}_2, \\dots, \\bar{x}_m \\end{equation}\n",
    "Question: what are the mean and the standard deviation of the averages; what shape does this distribution have?\n",
    "\n",
    "Let us run a simulation to discover\n",
    "\n",
    "### Example 1\n",
    "Construct a simulation that generates $m$ samples from the random variable $X ~ \\mathcal{N}(100, 12)$, each with size $n$. Then calculate *the mean of the sample means* and the *standard deviation of the sample means* and plot the samples on a histogram. Think about the shape of the distribution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "advance-portrait",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean of means =  100.04301599891602\n",
      "Stdev of means =  4.0285026092726826\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Distribution seems normal in shape\n"
     ]
    }
   ],
   "source": [
    "# Define X\n",
    "mu = 100\n",
    "sigma = 12\n",
    "\n",
    "n = 9 # the sample size\n",
    "m = 10000 # number of samples we choose\n",
    "\n",
    "X = stats.norm(mu, sigma)\n",
    "\n",
    "means = np.zeros(m)\n",
    "for i in range(m): #simulate\n",
    "    sample = X.rvs(size=n) # get a random sample\n",
    "    means[i] = np.mean(sample) # calculate and store the mean\n",
    "\n",
    "print('Mean of means = ', np.mean(means))\n",
    "print('Stdev of means = ', np.std(means))\n",
    "\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.hist(means, density=True, bins=25, alpha=0.5)\n",
    "plt.show()\n",
    "\n",
    "print('Distribution seems normal in shape')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "spectacular-vision",
   "metadata": {},
   "source": [
    "### Example 2\n",
    "Run a similar simulation like in **Example 1**, but now use a random variable $Q$ which follows a $\\chi^2$-distribution with 10 degrees of freedom. Calculate *the mean of the sample means* and the *standard deviation of the sample means* and plot the samples on a histogram. Think about the shape of the distribution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "referenced-patch",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean of means =  9.975003910770093\n",
      "Stdev of means =  1.4823704300089722\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Distribution seems close to normal in shape\n"
     ]
    }
   ],
   "source": [
    "# Define Q\n",
    "df = 10\n",
    "\n",
    "n = 9 # the sample size\n",
    "m = 10000 # number of samples we choose\n",
    "\n",
    "Q = stats.chi2(df)\n",
    "\n",
    "means = np.zeros(m)\n",
    "for i in range(m): #simulate\n",
    "    sample = Q.rvs(size=n) # get a random sample\n",
    "    means[i] = np.mean(sample) # calculate and store the mean\n",
    "\n",
    "print('Mean of means = ', np.mean(means))\n",
    "print('Stdev of means = ', np.std(means))\n",
    "\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.hist(means, density=True, bins=25, alpha=0.5)\n",
    "plt.show()\n",
    "\n",
    "print('Distribution seems close to normal in shape')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eastern-olive",
   "metadata": {},
   "source": [
    "### The Central Limit Theorem\n",
    "The Central Limit Theorem (CLT) is one of the most (ab)used facts in statistics. Sometimes it is called **the fundamental theorem of statistics** (in analogy to similar theorems in arithmetic, algebra, and calculus)\n",
    "\n",
    "In simple terms, the CLT states that if you have a random variable $X$ with mean $\\mu_X$ and standard deviation $\\sigma_X$, and you draw many samples of size $n$ from $X$, then the averages of those samples are described by a random variable, labeled as $\\overline{X}$, for which:\n",
    "* $\\mu_\\overline{X} = \\mu_X$ (the mean of the sample means equals the mean of the original distribution)\n",
    "* $\\sigma_\\overline{X} = \\displaystyle\\frac{\\sigma_X}{\\sqrt{n}}$ (the standrad deviation of the sample means equals the standard deviation of the original distribution scaled down by a factor of $\\sqrt{n}$)\n",
    "\n",
    "Even more, the shape of the distribution is **approximately** Normal, or in other words $\\overline{X} \\sim \\mathcal{N}\\left( \\mu_\\overline{X}, \\sigma_\\overline{X}  \\right) = \\mathcal{N}\\left( \\mu, \\displaystyle\\frac{\\sigma}{\\sqrt{n}} \\right)$. This distribution is called the **sampling distribution of the mean**.\n",
    "\n",
    "If $X$ is distributed normally, then $\\overline{X}$ is also distributed normally, and this is the only case when the sampling distribution of the mean is exactly normal.\n",
    "\n",
    "### Example 3\n",
    "Illustrate the CLT on the random variable $X \\sim \\mathcal{N}(160, 10)$ if the sample size is $n = 16$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "existing-flush",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define X\n",
    "mu = 160\n",
    "sigma = 10\n",
    "n = 16\n",
    "m = 10000 # number of samples\n",
    "\n",
    "X = stats.norm(mu, sigma)\n",
    "X_bar = stats.norm(mu, sigma/np.sqrt(n))\n",
    "\n",
    "means = np.zeros(m)\n",
    "for i in range(m): #simulate\n",
    "    sample = X.rvs(size=n)\n",
    "    means[i] = np.mean(sample)\n",
    "\n",
    "xs = np.linspace(mu-3*sigma, mu+3*sigma, 1000)\n",
    "plt.figure(figsize=(14, 4))\n",
    "plt.hist(means, density=True, alpha=0.4, bins=25)\n",
    "plt.plot(xs, X.pdf(xs), color='tab:red', label=f'X ~ N({mu}, {sigma})')\n",
    "plt.plot(xs, X_bar.pdf(xs), label=f'X-bar ~ N({mu}, {sigma/np.sqrt(n)})')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "nervous-airfare",
   "metadata": {},
   "source": [
    "### Example 4\n",
    "Illustrate the CLT on the random variable $G$ which follows a **geometric distribution** with parameter $p=0.2$, i.e. $G \\sim \\mathcal{Geom}(0.2)$, with sample size $n = 17$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "embedded-eating",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define G\n",
    "p = 0.2\n",
    "n = 17\n",
    "m = 10000 # number of samples\n",
    "\n",
    "G = stats.geom(p)\n",
    "mean_G = G.mean()\n",
    "std_G = G.std()\n",
    "G_bar = stats.norm(mean_G, std_G/np.sqrt(n))\n",
    "\n",
    "means = np.zeros(m)\n",
    "for i in range(m): #simulate\n",
    "    sample = G.rvs(size=n)\n",
    "    means[i] = np.mean(sample)\n",
    "    \n",
    "\n",
    "xs_discrete = np.arange(1, 12)\n",
    "xs = np.linspace(1, 12, 1000)\n",
    "plt.figure(figsize=(14, 4))\n",
    "plt.plot(xs_discrete, G.pmf(xs_discrete), color='tab:red', alpha=1, label=f'G ~ Geom({p})')\n",
    "plt.hist(means, density=True, alpha=0.4, bins=25)\n",
    "plt.plot(xs, G_bar.pdf(xs), label=f'X-bar ~ N({mean_G}, { np.round(std_G/np.sqrt(n), 2) })')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "anonymous-ultimate",
   "metadata": {},
   "source": [
    "### How does this help us with data?\n",
    "The situation is as following: we have one sample of size $n$ from a population with unknown population mean $\\mu$ and population standard deviation $\\sigma$. Obviously, the *sample statistics* $\\bar{x}$ and $s$ can estimate $\\mu$ and $\\sigma$, but they can also \"miss\" them by a lot. These sample statistics are called **point estimates** of the population parameters.\n",
    "\n",
    "Question: how do we take adventage of the facts stated in the CLT to give an **interval estimate** of the population mean $\\mu$?\n",
    "\n",
    "In practice, if you work with a *large sample* ($n \\geqslant 30$ or $40$), then you can consider the sampling distribution to be close enough to the normal distribution. However, in all other cases, the Student *t*-distribution with $n-1$ degrees of freedom describes the sampling distibution much better than the normal distribution.\n",
    "\n",
    "Recall the **68-95-99.7 Rule** for the Normal distribution. We can constuct something like that for any distribution. Since we only have one sample in reality, we use the sample statistics as estimates of the population parameters. If  $\\bar{x}$ and $s$ are the sample mean standard deviation from a sample with size $n$, then the **$(1-\\alpha)\\%$ confidence interval** estimate of the population mean is given by:\n",
    "\\begin{equation}\\displaystyle \\bar{x} \\pm t_{n-1}^* \\cdot \\frac{s}{\\sqrt{n}}\\end{equation}\n",
    "where $t_{n-1}^*$ is a scaling coefficient that depends on the sample size $n$ and can be obtained using $t$-distribution. The number $df = n-1$ is the number of **degrees of freedom**, while the quantity $SE = \\frac{s}{\\sqrt{n}}$ is called **standard error**. Let's see some examples. The number $(1-\\alpha)\\%$ is called **confidence level** and usually is at least 90%.\n",
    "\n",
    "### Example 5\n",
    "In this example, we use a confidence interval to estimate the mean of a known population (i.e. this is just a *controlled* experiment). Let $X \\sim \\mathcal{N}(100, 12)$. Generate 5 different 90% CIs and 5 more 95% CIs for the mean of the population based on samples of size $n=9$. Comment on what you get."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "republican-place",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90% CI\n",
      "(98.97355189761443, 109.16783582386323)\n",
      "(81.9298890148186, 97.80118722674806) ***\n",
      "(98.74086736728565, 112.44836882610822)\n",
      "(95.84275460665245, 105.12209653924455)\n",
      "(92.16198888928771, 101.03271961202766)\n",
      "\n",
      "95% CI\n",
      "(87.76437843473765, 109.65470715975222)\n",
      "(90.23937726091157, 111.17426462910271)\n",
      "(92.40149480643298, 113.7448137380092)\n",
      "(88.8286017711198, 105.4377195622224)\n",
      "(95.7701083714202, 108.02461906066827)\n"
     ]
    }
   ],
   "source": [
    "# Define X\n",
    "mu = 100\n",
    "sigma = 12\n",
    "X = stats.norm(mu, sigma)\n",
    "\n",
    "n = 9\n",
    "df = n-1\n",
    "T = stats.t(df=df)\n",
    "\n",
    "print('90% CI')\n",
    "c_level = 0.90\n",
    "for i in range(5): # loop\n",
    "    sample = X.rvs(size=n)\n",
    "    x_bar = sample.mean()\n",
    "    se = sample.std()/np.sqrt(n)\n",
    "    t_star = T.ppf((1+c_level)/2)\n",
    "    l = x_bar - t_star*se\n",
    "    u = x_bar + t_star*se\n",
    "    if l<=100 and 100<=u:\n",
    "        print(f'({l}, {u})')\n",
    "    else:\n",
    "        print(f'({l}, {u}) ***')\n",
    "\n",
    "\n",
    "print('\\n95% CI')\n",
    "c_level = 0.95\n",
    "for i in range(5): # loop\n",
    "    sample = X.rvs(size=n)\n",
    "    x_bar = sample.mean()\n",
    "    se = sample.std()/np.sqrt(n)\n",
    "    t_star = T.ppf((1+c_level)/2)\n",
    "    l = x_bar - t_star*se\n",
    "    u = x_bar + t_star*se\n",
    "    if l<=100 and 100<=u:\n",
    "        print(f'({l}, {u})')\n",
    "    else:\n",
    "        print(f'({l}, {u}) ***')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "adjustable-heading",
   "metadata": {},
   "source": [
    "### Example 6\n",
    "Let $Y \\sim \\mathcal{Po}(13)$. Generate 5 different 95% CIs and 5 more 99% CIs for the mean of the population based on samples of size $n=25$. Comment on what you get."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "normal-election",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "95% CI\n",
      "(12.229054380752657, 16.01094561924734)\n",
      "(11.226403834722527, 14.693596165277475)\n",
      "(11.295801061113657, 14.224198938886342)\n",
      "(11.732077705717982, 14.507922294282016)\n",
      "(10.79849193862976, 13.921508061370238)\n",
      "(11.032915889350592, 14.087084110649409)\n",
      "(10.843102583958622, 14.036897416041377)\n",
      "(11.621355662959541, 14.69864433704046)\n",
      "(12.776548041766238, 15.063451958233761)\n",
      "(11.314539982031512, 14.205460017968488)\n",
      "\n",
      "99% CI\n",
      "(11.190573844188249, 14.489426155811751)\n",
      "(11.207519681821552, 14.312480318178448)\n",
      "(10.836556436154279, 14.763443563845723)\n",
      "(10.836768058496686, 14.523231941503314)\n",
      "(10.636390570582142, 14.96360942941786)\n",
      "(11.232089601189577, 15.487910398810422)\n",
      "(11.332409447939535, 14.747590552060464)\n",
      "(9.91153786900066, 14.72846213099934)\n",
      "(11.884971798586164, 15.235028201413837)\n",
      "(10.969483834099368, 15.350516165900633)\n"
     ]
    }
   ],
   "source": [
    "# Define Y\n",
    "lmbd = 13\n",
    "Y = stats.poisson(lmbd)\n",
    "\n",
    "n = 25\n",
    "df = n-1\n",
    "T = stats.t(df=df)\n",
    "\n",
    "print('95% CI')\n",
    "c_level = 0.95\n",
    "for i in range(10): # loop\n",
    "    sample = Y.rvs(size=n)\n",
    "    x_bar = sample.mean()\n",
    "    se = sample.std()/np.sqrt(n)\n",
    "    t_star = T.ppf((1+c_level)/2)\n",
    "    l = x_bar - t_star*se\n",
    "    u = x_bar + t_star*se\n",
    "    if l<=Y.mean() and Y.mean()<=u:\n",
    "        print(f'({l}, {u})')\n",
    "    else:\n",
    "        print(f'({l}, {u}) ***')\n",
    "        \n",
    "        \n",
    "        \n",
    "print('\\n99% CI')\n",
    "c_level = 0.99\n",
    "for i in range(10): # loop\n",
    "    sample = Y.rvs(size=n)\n",
    "    x_bar = sample.mean()\n",
    "    se = sample.std()/np.sqrt(n)\n",
    "    t_star = T.ppf((1+c_level)/2)\n",
    "    l = x_bar - t_star*se\n",
    "    u = x_bar + t_star*se\n",
    "    if l<=Y.mean() and Y.mean()<=u:\n",
    "        print(f'({l}, {u})')\n",
    "    else:\n",
    "        print(f'({l}, {u}) ***')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "particular-thought",
   "metadata": {},
   "source": [
    "### Example 7\n",
    "The sample given in the next cell comes from a distribution whose mean you do not know, but need to estimate. Use a 95% CI to estimate the population mean."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "infrared-tracker",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2.274575262558397, 4.044304434441603)\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(2.274575262558397, 4.044304434441603)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample = np.array([3.23545161, 3.77542568, 1.01742999, 1.95137322, 3.70661749,\n",
    "       1.54115566, 3.97507688, 3.74119874, 2.99544951, 1.20815545,\n",
    "       4.43162589, 1.68634582, 0.97010408, 3.81707371, 1.37509011,\n",
    "       1.46900854, 5.10493947, 8.15556455, 6.73199071, 2.29971986])\n",
    "\n",
    "n = sample.size\n",
    "df = n-1\n",
    "c_level = 0.95\n",
    "\n",
    "x_bar = sample.mean()\n",
    "se = sample.std()/np.sqrt(n)\n",
    "\n",
    "t_star = stats.t.ppf((1+c_level)/2, df)\n",
    "\n",
    "l = x_bar - t_star*se\n",
    "u = x_bar + t_star*se\n",
    "print(f'({l}, {u})\\n')\n",
    "\n",
    "\n",
    "stats.t.interval(alpha=0.95,\n",
    "                 df = sample.size - 1,\n",
    "                 loc=np.mean(sample),\n",
    "                 scale=np.std(sample)/np.sqrt(sample.size)\n",
    "                 )"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
